# Lab 1: Course Intro & the Very Basics {.unnumbered}

## Package(s)

-   [base](https://www.r-project.org)

## Schedule

-   08.00 - 08.15: Arrival, fill in the [pre-course anonymous questionaire](getting_started.qmd#sec-questionnaire) and [interest based group formation](getting_started.qmd#sec-groups)
-   08.15 - 08.45: Lecture: [Course Introduction](https://raw.githack.com/r4bds/r4bds.github.io/main/lecture_lab01.html)
-   08.45 - 09.00: Break
-   09.00 - 11.15: [Exercises](#sec-exercises)
-   11.15 - 11.30: Break
-   11.30 - 12.00: Lecture: [Reproducibility in Modern Bio Data Science](https://raw.githack.com/r4bds/r4bds.github.io/main/how_to_organise_a_project.html)

## Learning Materials {#sec-learning-materials}

*Please prepare the following materials:*

-   Read the full course description here: [22100 BSc](https://kurser.dtu.dk/course/22100) / [22160 MSc](https://kurser.dtu.dk/course/22160)
-   If you have not already done so, please take 2 min. to answer the [pre-course anonymous questionaire](getting_started.qmd#sec-questionnaire)
-   Read course site sections: [Welcome to R for Bio Data Science](index.qmd), [Prologue](prologue.qmd) and lastly [Getting Started](getting_started.qmd), where it is important that you **perform any small tasks mentioned**
-   Book: [R4DS2e: Welcome](https://r4ds.hadley.nz)
-   Book: [R4DS2e: Preface to the second edition](https://r4ds.hadley.nz/preface-2e)
-   Book: [R4DS2e: Introduction](https://r4ds.hadley.nz/intro)
-   Book: [R4DS2e: Chapter 2 Workflow: basics](https://r4ds.hadley.nz/workflow-basics)
-   Book: [R4DS2e: Chapter 28 Quarto](https://r4ds.hadley.nz/quarto.html) (Don't do the exercises)
-   Video: [RStudio for the Total Beginner](https://www.youtube.com/watch?v=FIrsOBy5k58)
-   Paper: [A Quick Guide to Organizing Computational Biology Projects](http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1000424)

_Unless explicitly stated, do not do the per-chapter exercises in the R4DS2e book_

## Learning Objectives

*A student who has met the objectives of the session will be able to:*

-   Master the very basics of R
-   Navigate the RStudio IDE
-   Create, edit and run a basic Quarto document
-   Explain why reproducible data analysis is important, as well as identify relevant challenges and explain replicability versus reproducibility
-   Describe the components of a reproducible data analysis

## Exercises {#sec-exercises}

Today, we will focus on getting you started and up and running with the first elements of the course, namely the RStudio IDE (Integrated Developer Environment) and Quarto. If the relationship between `R` and RStudio is unclear, think of it this way: Consider a car, in that case, `R` would be the engine and RStudio would be the rest of the car. Neither is particularly useful, but together they form a functioning unit. Before you continue, make sure you in fact did watch the "RStudio for the Total Beginner" video (See the [Learning Materials](#sec-learning-materials) for today's session).


### First steps

#### The Console

Now, in the console, as you saw in the video, you can type commands like:

```{r}
#| eval: false
2+2
1:100
3*3
sample(1:9)
X <- matrix(sample(1:9), nrow = 3, ncol = 3)
X
sum(X)
mean(X)
?sum
sum
nucleotides <- c("a", "c", "g", "t")
nucleotides
sample(nucleotides, size = 100, replace = TRUE)
table(sample(nucleotides, size = 100, replace = TRUE))
paste0(sample(nucleotides, size = 100, replace = TRUE), collapse = "")
replicate(n = 10, expr = paste0(sample(nucleotides, size = 100, replace = TRUE), collapse = ""))
df <- data.frame(id = paste0("seq", 1:10), seq = replicate(n = 10, expr = paste0(sample(nucleotides, size = 100, replace = TRUE), collapse = "")))
df
str(df)
ls()
```

Take some time and play around with these commands and other things you can come up with. Use the `?function` to get help on what that function does. Be sure to discuss what you observe in the console. Do not worry too much about the details for now; we are just getting started. But as you hopefully can see, `R` is very flexible and basically the message is: "If you can think it, you can build it in `R`".

- Go to [R4DS2e Chapter 2 Workflow: basics](https://r4ds.hadley.nz/workflow-basics) in R4DS2e and do the exercises

#### The Terminal

Notice how in the console pane, you also get a `Terminal`, click and enter:

```{bash}
#| eval: false
ls
mkdir tmp
touch tmp/test.txt
ls tmp
rm tmp/test.txt
rmdir tmp
ls
echo $SHELL
```

Basically, here you have access to a full terminal, which can prove immensely useful! Note, you may or may not be familiar with the concept of a terminal. Simply think of it as a way to interact with the computer using text command, rather than clicking on icons etc. Click back to the console.

#### The Source

The source is where you will write scripts. A script is a series of commands to be executed sequentially, i.e. first line 1, then line 2 and so on. Right now, you should have a open script called `Untitled1`. If not, you can create a new script by clicking white paper with a round green plus sign in the upper left corner.

Taking inspiration from the examples above, try to write a series of commands and include a `print()`-statement at the very end. Click `File` $\rightarrow$ `Save` and save the file as e.g. `my_first_script.R`. Now, go to the console and type in the command `source("my_first_script.R")`. Congratulations! You have now written your very first reproducible R program!

### The Whole Shebang

Enough playing around, let us embark on our modern Bio Data Science in R journey.

-   In the `Files` pane, click `New Folder` and create a folder called `projects`
-   In the upper right corner, click where it says `Project: (None)` and then click `New Project...`
-   Click `New Directory` and then `New Project`
-   In the `Directory name:`, enter e.g. `r_for_bio_data_science`
-   Click the `Browse...` button and select your newly created `projects` directory and then click `Choose`
-   Click `Create Project` and wait a bit for it to get created

#### On Working in Projects

Projects allow you to create fully transferable bio data science projects, meaning that the root of the project will be where the `.Rproj` file is located. You can confirm this by entering `getwd()` in the console. This means that under *no circumstances* should you ever *not* work within a project, nor should you *ever* use absolute paths. Every single path you state in your project *must* be relative to the project root.

But why? Imagine you have created a project, where you have indeed used absolute paths. Now you want to share that project with a colleague. Said colleague gets your project and tests the reproducibility by running the project end-to-end. But it *completely* fails because you have hardcoded your paths to be absolute, meaning that all file and project resource locations point to locations on your laptop.

Projects are a *must* and allow you to create reproducible encapsulated bio data science projects. Note, the concept of reproducibility is absolutely central to this course and must be considered in all aspects of the life cycle of a project!

#### Quarto

While `.R`-scripts are a perfectly valid way to write scripts, there is another Skywalker:

-   In the upper left corner, again, click the white paper with the round green plus, but this time select `Quarto Document`
-   Enter a `Title:`, e.g. "Lab 1 Exercises" and enter your name below in the box `Author:`
-   Click `Create`
-   Important: Save your Quarto document! Click `File` $\rightarrow$ `Save` and name it e.g. `lab_01_exercises.qmd`
-   Minimise the `Environment` pane

You should now see something like this:

![](images/lab01_05.png){fig-align="center" width="800px"}

Try clicking the `Render` button just above the quarto-document. This will create the HTML5 output file. Note! You may get a `Connection Refused` message. If so, don't worry, just close the page to return to the cloud server and find the generated `.html` file, left-click and select `View in Web Browser`.

If you have previously worked with `Rmarkdown`, then many features of `Quarto` will be familiar. Think of `Quarto` as a complete rethinking of `Rmarkdown`, i.e. based on all the experience gained, what would the optimal way of constructing an open-source scientific and technical publishing system?

If you have previously encountered Jupyter notebooks, Quarto is similar. The basic idea is to have one document covering the entire project cycle.

Proceed to [R4DS2e Chapter 28 Quarto](https://r4ds.hadley.nz/quarto) and do the exercises.

### Artificial Intelligence in modern Bio Data Science

*Honestly, if AI is going to solve all coding and analysis tasks moving forth, then why even bother???* ðŸ¤·

This technology has made its entrance and is here to stay, but in order to really increase your learning yield, it is very important to understand how to use this technology.

You can compare these technologies with being in the same group as the absolute smartest students in class, in fact the smartest student who has ever taken this class.

It is really important to distinguish the following two scenarios:

1.  Getting the smart student to solve your programming/analysis task
2.  Getting feedback from the smart student on how you solved your programming/analysis task

In scenario 1, you are robbed of your thought processes on how to approach the task, divide into to manageable sub tasks and then come up with structured solutions, which combined, will solve the overall task. This process is referred to as "Computational Thinking".

In scenario 2, you go through the above outlined computational thinking process and you train and develop your competencies

In this course, the importance of being aware of actively building and training your computational thinking competencies, while also building your technical toolbox cannot be underestimated!!!

Can an AI solve the majority of tasks you will work with in this course? YES!!! BUT, it is up to you as a student to actively engage the course taking responsibility for building competencies as outlined above.

Basically, what will you learn, if you let the smartest student do your homework? ðŸ¤·

Here is the long term catch, if you do possess competencies beyond what an AI can do, then why would a future employer hire you instead of just getting an AI to solve the tasks???

It is not just about passing this course, it is about understanding that in this course, you will be building the foundation for your future career.

#### Getting started

For this exercise, you will need access to some

-   [ChatGPT by OpenAI](https://chat.openai.com)
-   [Claude by Anthropic](http://claude.ai)
-   [CoPilot by Microsoft](https://copilot.microsoft.com)
-   [Gemini by Google](https://gemini.google.com/app)
-   [Grok by X.ai](https://grok.com/?referrer=website)

There are many others and more keep coming, the development in this field is extremely rapid!

In the following, please feel free to use whichever of the above you prefer or perhaps try one, which is new to you.

##### Let us get acquainted

I am assuming that most students by now have encountered this technology. Nevertheless, let us get this exercise started:

-   *T1:* Start a new chat and enter the question: "Explain in simple terms what you are"
-   *T2:* Now enter the question: "Explain in simple terms how you work"

And then in your group, compare the output from the AI and answer:

-   *Q1:* Were the answers the same, when using different AIs?
-   *Q2:* Were the answers the same, when using the same AI?
-   *Q3:* Discuss in your group why/why not?

-   *T3:* Use your favourite AI and try to get input on your "why/why not"-discussion

-   *Q4:* Discuss in your group if the AI added additional reflections on why/why not and what the consequence of this is in context with solving tasks?
-   *Q5:* Discuss in your group: Will the same person always give the same answer? How about different persons?
-   *Q6:* Discuss in your group if these AIs basically are human? Discuss how they are created, how they generate text and if this limits their capabilities compared to humans. If you do not know how they are created of how the generate text, ask them

#### Using AI as an assistant, a use case

In this use case, we will work with the following paper:

-   [Accurate prediction of HLA class II antigen presentation across all loci using tailored data acquisition and refined machine learning](https://www.science.org/doi/full/10.1126/sciadv.adj6367)

You are working as a researcher, or a consultant or a bioinformatician or a bio data scientist and your boss have given you this paper and asked you to look into it. You decide to use AI:

-   *T4:* Download the paper, then upload it to your favourite AI and ask it: "Explain in simple terms what this paper is a about and create a simple brief summary" and read the summary, perhaps if something is unclear, ask the AI to elaborate

You take interest in the pseudo-sequence distance metric and again you decide to use AI:

-   *T5:* Ask your favourite AI: "Please in simple terms explain the pseudo-sequence distance metric used in the paper", again if something is unclear, simply ask for elaboration

Likely your AI will outline something concerning similarity or distance between these protein molecules. Let us dig a bit further in:

-   *T6:* Ask your favourite AI: "Please in simple terms explain exactly how the authors calculate this pseudo-sequence distance metric between two molecules"

The AI may or may not point you in the right direction. Being a bit unsure of this, you dig into the paper yourself and you find equation 2:

-   *T7:* Ask your favourite AI: "As I read the paper, the authors define the pseudo-sequence distance metric using equation 2. Please state the equation and in simple terms explain the terms"

Again, the AI may or may not point you in the right direction.

-   *T8:* Check that the equation the AI returns looks like equation 2, if not (which may or may not happen!):
    - *T8a:* Take a moment to ponder: You were quite specific in your instructions and the AI returned a wrong equation with FULL confidence! (This is called AI hallucination and it's something to be VERY aware of!)
    - *T8b:* Then state: "Looking at the equation you have stated, I see it does not seem to match equation 2 in the paper. Please check and correct"

Once you are confident that the AI has the right equation you now want to impress your boss and decide to create an R-function:

-   *T9:* Check that the equation the AI returns looks exactly like equation 2 and then state: "Please propose an R-function, which given two pseudo-sequences computes and returns the pseudo-sequence distance metric. Include an example of running the function and getting a result"

Note, in the proposed code, you can simply in the upper right corner click `copy`.

-   *T10:* Copy the code and paste it into the console in your RStudio Cloud server session and then run it, by hitting return. It the AI provided a separate example, also run this and check the result

-   *T11:* Now, return to your favourite AI and enter: "Please propose an R-function for randomly generating a pseudo sequence. Then use that to compute the pseudo-sequence distance metric 10 times"

Again, run this code and check the 10 computed distances. The exact meaning of these 10 examples is not clear to you, so you decide to again turn to your AI:

-   *T12:* Enter: "The exact meaning of these values are not clear to me. Here are my computed values:" and then copy paste the computed values from your R-console

The AI will now come with some longer explanation, which may or may not be correct.

From conferring with other works on computing sequence distance metrics, it is my understanding that these metrics are bounded between 0 and 1, is that not also the case here?


##### Moving onto R

In the upper left corner, click `ChatGPT` it to start a new session.

Again, type the following questions in the prompt and read the answers:

1.  *R*
2.  *What is R?*
3.  *Give a few simple examples*
4.  *Explain the difference between base R and Tidyverse R*

If you get some code examples, try copying and pasting them into the console in RStudio to see if they run.

##### Prompt Engineering

Start a new chat and enter:

1.  *Give a few simple examples*

Compare the response with the one from before, is it the same or different and why so?

Discuss in your group what is "Prompt Engineering" and how does it relate to the above few tests you did? (Bonus info: Prompt engineer is already a job and people are making money off of selling "prompts")

##### ...a bit more

Start a new chat and enter:

1.  *Tell me about DNA*

Check if it gives you correct information?

Now, write:

2.  *Give a few fun examples on how to get started with the R programming language using DNA*
3.  *Copy/paste the code into the Console, do the examples all run?*
4.  *Discuss in your group if you understand what is going on*
5.  *Earlier you were told to play around with some code snippets. Perhaps you didn't fully catch what was going on? If so, try to type in e.g.:*

```{verbatim}
I'm new to R, please explain in simple terms, what the following code does:

"
nucleotides <- c("a", "c", "g", "t")
replicate(n = 10, expr = paste0(sample(nucleotides, size = 100, replace = TRUE), collapse = ""))
"
```

6. *Now, you could also ask a question like this:*

```{verbatim}
I am a student in the course "R for Bio Data Science" and we have been asked to solve the following problem:

"
Now it is time to take it a step further. A) Create a function, which returns random RNA of length 'l' and B) another function, which performs reverse transcription.
"

Please give me the solution to the problem
```

7.  *Try to run the code, you were presumable given. Likely, the tasks have been solved, but did you actually learn something? Do you understand the details of the code?*

##### Strawberry Fields Forever

Start yet a new chat and run:

1.  *How many Rs are there in the word strawberry?*
2.  *How many Rs are there in the word strawberries?*
3.  *What is the difference between strawberry and strawberries?*
4.  *Try as above, but using 'raspberry' and 'cranberry'*
5.  *Inspect the answers, did ChatGPT get these simple questions right?*

##### Summary

**The following is IMPORTANT, so please read carefully and please discuss in your group**

While `ChatGPT` can be a powerful tool for code productivity, it comes with a major caveat: **When it fails, it fails with confidence** (See `Strawberry Fields Forever` above). This means that it will be equally confident whether it is right or wrong! The optimal yield is when you are working on a problem with a tool, where you already have a good knowledge of the problem and the tool. Here, you can use your experience to evaluate if you are heading in the right direction or if you're being send on a wild goose chase. In this situation, ChatGPT can be a powerful sparring partner to augment your bio data science workflow to enhance productivity.

Know the difference between "asking for a solution" and "asking for an explanation" - Do not cheat yourself here, it is **very important** that the yield of this course is that **you** learn **Tidyverse R** and **not** how to "use ChatGPT to produced code".

Therefore, **do not use ChatGPT to solve the exercises**, rather use ChatGPT as a learning assistant. Here is an example of the difference:

- **Wrong:** _Give me the tidyverse code for adding a new variable `z` to a dataset, which is the sum of `x` and `y`_
- **Right:** _In simple terms, explain which tidyverse function is used to add variables to datasets and give a very basic example of how it is used_

The **wrong** way will give you the solution directly, robbing you of the learning process of internalising the functionality and the translation of the general explanation to the specific application to your problem. The **right** way, will allow you to work with your understanding of the problem and how to translate the general explation into a specific solution to your problem.
